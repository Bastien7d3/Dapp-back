/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVoter"
      | "endProposalsRegistration"
      | "endVotingSession"
      | "getCurrentParticipation"
      | "getProposalsCount"
      | "getVoterInfo"
      | "getWhitelist"
      | "getWinningProposal"
      | "owner"
      | "proposals"
      | "quorumPercentage"
      | "renounceOwnership"
      | "setQuorum"
      | "startProposalsRegistration"
      | "startVotingSession"
      | "submitProposal"
      | "tallyVotes"
      | "transferOwnership"
      | "vote"
      | "voters"
      | "votersCount"
      | "winningProposalId"
      | "workflowStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProposalRegistered"
      | "QuorumUpdated"
      | "VoteModified"
      | "Voted"
      | "VoterRegistered"
      | "WorkflowStatusChange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endProposalsRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentParticipation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningProposal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startProposalsRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workflowStatus",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endProposalsRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startProposalsRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workflowStatus",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRegisteredEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumUpdatedEvent {
  export type InputTuple = [oldQuorum: BigNumberish, newQuorum: BigNumberish];
  export type OutputTuple = [oldQuorum: bigint, newQuorum: bigint];
  export interface OutputObject {
    oldQuorum: bigint;
    newQuorum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteModifiedEvent {
  export type InputTuple = [
    voter: AddressLike,
    oldProposalId: BigNumberish,
    newProposalId: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    oldProposalId: bigint,
    newProposalId: bigint
  ];
  export interface OutputObject {
    voter: string;
    oldProposalId: bigint;
    newProposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [voter: string, proposalId: bigint];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voterAddress: AddressLike];
  export type OutputTuple = [voterAddress: string];
  export interface OutputObject {
    voterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowStatusChangeEvent {
  export type InputTuple = [
    previousStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [previousStatus: bigint, newStatus: bigint];
  export interface OutputObject {
    previousStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  endProposalsRegistration: TypedContractMethod<[], [void], "nonpayable">;

  endVotingSession: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentParticipation: TypedContractMethod<[], [bigint], "view">;

  getProposalsCount: TypedContractMethod<[], [bigint], "view">;

  getVoterInfo: TypedContractMethod<
    [_voter: AddressLike],
    [[boolean, bigint] & { hasVoted: boolean; votedProposalId: bigint }],
    "view"
  >;

  getWhitelist: TypedContractMethod<[], [string[]], "view">;

  getWinningProposal: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { description: string; voteCount: bigint }],
    "view"
  >;

  quorumPercentage: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setQuorum: TypedContractMethod<
    [_quorumPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  startProposalsRegistration: TypedContractMethod<[], [void], "nonpayable">;

  startVotingSession: TypedContractMethod<[], [void], "nonpayable">;

  submitProposal: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  tallyVotes: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isRegistered: boolean;
        hasVoted: boolean;
        votedProposalId: bigint;
      }
    ],
    "view"
  >;

  votersCount: TypedContractMethod<[], [bigint], "view">;

  winningProposalId: TypedContractMethod<[], [bigint], "view">;

  workflowStatus: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endProposalsRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endVotingSession"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentParticipation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposalsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterInfo"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [[boolean, bigint] & { hasVoted: boolean; votedProposalId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWhitelist"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWinningProposal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { description: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQuorum"
  ): TypedContractMethod<
    [_quorumPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startProposalsRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVotingSession"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProposal"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tallyVotes"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isRegistered: boolean;
        hasVoted: boolean;
        votedProposalId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winningProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "workflowStatus"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRegistered"
  ): TypedContractEvent<
    ProposalRegisteredEvent.InputTuple,
    ProposalRegisteredEvent.OutputTuple,
    ProposalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "QuorumUpdated"
  ): TypedContractEvent<
    QuorumUpdatedEvent.InputTuple,
    QuorumUpdatedEvent.OutputTuple,
    QuorumUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteModified"
  ): TypedContractEvent<
    VoteModifiedEvent.InputTuple,
    VoteModifiedEvent.OutputTuple,
    VoteModifiedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowStatusChange"
  ): TypedContractEvent<
    WorkflowStatusChangeEvent.InputTuple,
    WorkflowStatusChangeEvent.OutputTuple,
    WorkflowStatusChangeEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalRegistered(uint256)": TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;
    ProposalRegistered: TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;

    "QuorumUpdated(uint256,uint256)": TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;
    QuorumUpdated: TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;

    "VoteModified(address,uint256,uint256)": TypedContractEvent<
      VoteModifiedEvent.InputTuple,
      VoteModifiedEvent.OutputTuple,
      VoteModifiedEvent.OutputObject
    >;
    VoteModified: TypedContractEvent<
      VoteModifiedEvent.InputTuple,
      VoteModifiedEvent.OutputTuple,
      VoteModifiedEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "WorkflowStatusChange(uint8,uint8)": TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
    WorkflowStatusChange: TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
  };
}
